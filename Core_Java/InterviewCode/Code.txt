package InterviewCodes;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

class Employee {

	private int employeeId;
	private String employeeName;
	private double salary;

	public Employee() {
		super();
	}

	public Employee(int employeeId, String employeeName, double salary) {
		super();
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.salary = salary;
	}

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	@Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o==null || getClass()!=o.getClass()) return false;
        Employee employee = (Employee) o;
        return employeeId == employee.employeeId; // Compare by employeeId
    }
	@Override
	public int hashCode() {
		return  Integer.hashCode(employeeId);
		
	}
}

public class EmployeeMain {
	public static void main(String[] arg) {
		
		//Using Map

//		List<Employee> empList = new ArrayList<>();
//		empList.add(new Employee(1, "Sachin", 1000.00));
//		empList.add(new Employee(2, "Akshay", 2000.00));
//		empList.add(new Employee(3, "Mahesh", 3000.00));
//		empList.add(new Employee(4, "Ramesh", 4000.00));
//		empList.add(new Employee(5, "Ketan", 5000.00));
//		empList.add(new Employee(1, "Raj", 7000.00));
//		empList.add(new Employee(2, "Samarth", 7000.00));
//
//		Map<Double, Employee> empMap = new HashMap<>();
//		
//
//		empList.forEach(emp -> empMap.put(emp.getSalary(), emp));
//		
//		
//		
//		List<Employee> list = empMap.values().stream().sorted
                                (Comparator.comparing
                                (Employee::getEmployeeName))
                                .toList();
//	
//		list.forEach(e-> System.out.println(e.getEmployeeId()+" "+e.getEmployeeName()+" "+e.getSalary()));
		
		
		//Using Set 
		
		
		List<Employee> empList = new ArrayList<>();
        empList.add(new Employee(1, "Sachin", 1000.00));
        empList.add(new Employee(2, "Akshay", 2000.00));
        empList.add(new Employee(3, "Mahesh", 3000.00));
        empList.add(new Employee(4, "Ramesh", 4000.00));
        empList.add(new Employee(5, "Ketan", 5000.00));
        empList.add(new Employee(1, "Raj", 7000.00)); // Duplicate based on employeeId
        empList.add(new Employee(2, "Samarth", 7000.00)); // Duplicate based on employeeId

        // Use a Set to remove duplicates based on employeeId
        Set<Employee> empSet = new LinkedHashSet<>(empList);
        
        // Convert Set to a List and sort by employeeName
        List<Employee> sortedEmployees = empSet.stream()
                .sorted(Comparator.comparing(Employee::getEmployeeId))
                .toList();
        
        List<Employee> list = sortedEmployees.stream().sorted(Comparator.comparing(Employee::getEmployeeName)).toList();

        // Print the results
        list.forEach(e -> System.out.println(e.getEmployeeId() + " " + e.getEmployeeName() + " " + e.getSalary()));

	}
}